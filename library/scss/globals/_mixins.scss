// =============================================
// 1. BREAKPOINTS
@mixin media($bp-type, $bp-name-1, $bp-name-2: null) {

	@if ($bp-type == min-width) {

		$min-breakpoint-width: map-get($hui-breakpoints, $bp-name-1);

		@media (min-width: $min-breakpoint-width) {
			@content;
		}
	}

	@else if ($bp-type == max-width) {

		$max-breakpoint-width: #{map-get($hui-breakpoints, $bp-name-1) - 1px};

		@media (max-width: $max-breakpoint-width) {
			@content;
		}
	}

	@else if ($bp-type == between) {
		
		$min-breakpoint-width: map-get($hui-breakpoints, $bp-name-1);
		$max-breakpoint-width: #{map-get($hui-breakpoints, $bp-name-1) - 1px};

		@media (min-width: $min-breakpoint-width) and (max-width: $max-breakpoint-width) {
			@content;
		}
	}

	@else {

		@warn "Unfortunately, no type could be retrieved from `#{$bp-type}`. "
		+ "Use either `min-width`, `max-width`, or `between`.";
	}
}

// =============================================
// 2. BROWSER SUPPORT
@mixin support($support-type) {

	@if $support-type == ie {

		@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
			@content;
		}
	}

	@else if $support-type == edge {

		@supports (-ms-ime-align: auto) {
			@content;
		}
	}

	@else {

		@warn "Unfortunately, no type could be retrieved from `#{$support-type}`. "
		+ "Use either `ie` or `edge`.";
	}
}

// =============================================
// 3. GET AN ICON
@mixin icon($position: before, $icon: false, $styles: true) {

	@if $position == both {
		$position: 'before, &:after';
	}

	&:#{$position} {

		@if $icon {
			content: "#{map-get($icons, $icon)}";
		}

		@if $styles {
			@extend %hui-icons;
		}

		@content;
	}
}

// =============================================
// 4. GLOBAL CLASS
@mixin global-class() {

	.hustle-ui {
		@content;
	}
}

// =============================================
// 5. OPACITY
@mixin opacity($alpha: 1) {
	filter: alpha(opacity=$alpha*100);
	filter: progid:DXImageTransform.Microsoft.Alpha(opacity=#{$alpha*100});
	opacity: $alpha;
	-khtml-opacity: $alpha;
}